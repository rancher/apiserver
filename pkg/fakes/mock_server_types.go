// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/types/server_types.go

// Package fakes is a generated GoMock package.
package fakes

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/rancher/apiserver/pkg/types"
)

// MockResponseWriter is a mock of ResponseWriter interface.
type MockResponseWriter struct {
	ctrl     *gomock.Controller
	recorder *MockResponseWriterMockRecorder
}

// MockResponseWriterMockRecorder is the mock recorder for MockResponseWriter.
type MockResponseWriterMockRecorder struct {
	mock *MockResponseWriter
}

// NewMockResponseWriter creates a new mock instance.
func NewMockResponseWriter(ctrl *gomock.Controller) *MockResponseWriter {
	mock := &MockResponseWriter{ctrl: ctrl}
	mock.recorder = &MockResponseWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponseWriter) EXPECT() *MockResponseWriterMockRecorder {
	return m.recorder
}

// Write mocks base method.
func (m *MockResponseWriter) Write(apiOp *types.APIRequest, code int, obj types.APIObject) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Write", apiOp, code, obj)
}

// Write indicates an expected call of Write.
func (mr *MockResponseWriterMockRecorder) Write(apiOp, code, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockResponseWriter)(nil).Write), apiOp, code, obj)
}

// WriteList mocks base method.
func (m *MockResponseWriter) WriteList(apiOp *types.APIRequest, code int, obj types.APIObjectList) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteList", apiOp, code, obj)
}

// WriteList indicates an expected call of WriteList.
func (mr *MockResponseWriterMockRecorder) WriteList(apiOp, code, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteList", reflect.TypeOf((*MockResponseWriter)(nil).WriteList), apiOp, code, obj)
}

// MockAccessControl is a mock of AccessControl interface.
type MockAccessControl struct {
	ctrl     *gomock.Controller
	recorder *MockAccessControlMockRecorder
}

// MockAccessControlMockRecorder is the mock recorder for MockAccessControl.
type MockAccessControlMockRecorder struct {
	mock *MockAccessControl
}

// NewMockAccessControl creates a new mock instance.
func NewMockAccessControl(ctrl *gomock.Controller) *MockAccessControl {
	mock := &MockAccessControl{ctrl: ctrl}
	mock.recorder = &MockAccessControlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessControl) EXPECT() *MockAccessControlMockRecorder {
	return m.recorder
}

// CanAction mocks base method.
func (m *MockAccessControl) CanAction(apiOp *types.APIRequest, schema *types.APISchema, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanAction", apiOp, schema, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// CanAction indicates an expected call of CanAction.
func (mr *MockAccessControlMockRecorder) CanAction(apiOp, schema, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanAction", reflect.TypeOf((*MockAccessControl)(nil).CanAction), apiOp, schema, name)
}

// CanCreate mocks base method.
func (m *MockAccessControl) CanCreate(apiOp *types.APIRequest, schema *types.APISchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanCreate", apiOp, schema)
	ret0, _ := ret[0].(error)
	return ret0
}

// CanCreate indicates an expected call of CanCreate.
func (mr *MockAccessControlMockRecorder) CanCreate(apiOp, schema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanCreate", reflect.TypeOf((*MockAccessControl)(nil).CanCreate), apiOp, schema)
}

// CanDelete mocks base method.
func (m *MockAccessControl) CanDelete(apiOp *types.APIRequest, obj types.APIObject, schema *types.APISchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanDelete", apiOp, obj, schema)
	ret0, _ := ret[0].(error)
	return ret0
}

// CanDelete indicates an expected call of CanDelete.
func (mr *MockAccessControlMockRecorder) CanDelete(apiOp, obj, schema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanDelete", reflect.TypeOf((*MockAccessControl)(nil).CanDelete), apiOp, obj, schema)
}

// CanDo mocks base method.
func (m *MockAccessControl) CanDo(apiOp *types.APIRequest, resource, verb, namespace, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanDo", apiOp, resource, verb, namespace, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// CanDo indicates an expected call of CanDo.
func (mr *MockAccessControlMockRecorder) CanDo(apiOp, resource, verb, namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanDo", reflect.TypeOf((*MockAccessControl)(nil).CanDo), apiOp, resource, verb, namespace, name)
}

// CanGet mocks base method.
func (m *MockAccessControl) CanGet(apiOp *types.APIRequest, schema *types.APISchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanGet", apiOp, schema)
	ret0, _ := ret[0].(error)
	return ret0
}

// CanGet indicates an expected call of CanGet.
func (mr *MockAccessControlMockRecorder) CanGet(apiOp, schema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanGet", reflect.TypeOf((*MockAccessControl)(nil).CanGet), apiOp, schema)
}

// CanList mocks base method.
func (m *MockAccessControl) CanList(apiOp *types.APIRequest, schema *types.APISchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanList", apiOp, schema)
	ret0, _ := ret[0].(error)
	return ret0
}

// CanList indicates an expected call of CanList.
func (mr *MockAccessControlMockRecorder) CanList(apiOp, schema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanList", reflect.TypeOf((*MockAccessControl)(nil).CanList), apiOp, schema)
}

// CanPatch mocks base method.
func (m *MockAccessControl) CanPatch(apiOp *types.APIRequest, obj types.APIObject, schema *types.APISchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanPatch", apiOp, obj, schema)
	ret0, _ := ret[0].(error)
	return ret0
}

// CanPatch indicates an expected call of CanPatch.
func (mr *MockAccessControlMockRecorder) CanPatch(apiOp, obj, schema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanPatch", reflect.TypeOf((*MockAccessControl)(nil).CanPatch), apiOp, obj, schema)
}

// CanUpdate mocks base method.
func (m *MockAccessControl) CanUpdate(apiOp *types.APIRequest, obj types.APIObject, schema *types.APISchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanUpdate", apiOp, obj, schema)
	ret0, _ := ret[0].(error)
	return ret0
}

// CanUpdate indicates an expected call of CanUpdate.
func (mr *MockAccessControlMockRecorder) CanUpdate(apiOp, obj, schema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanUpdate", reflect.TypeOf((*MockAccessControl)(nil).CanUpdate), apiOp, obj, schema)
}

// CanWatch mocks base method.
func (m *MockAccessControl) CanWatch(apiOp *types.APIRequest, schema *types.APISchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanWatch", apiOp, schema)
	ret0, _ := ret[0].(error)
	return ret0
}

// CanWatch indicates an expected call of CanWatch.
func (mr *MockAccessControlMockRecorder) CanWatch(apiOp, schema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanWatch", reflect.TypeOf((*MockAccessControl)(nil).CanWatch), apiOp, schema)
}

// MockURLBuilder is a mock of URLBuilder interface.
type MockURLBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockURLBuilderMockRecorder
}

// MockURLBuilderMockRecorder is the mock recorder for MockURLBuilder.
type MockURLBuilderMockRecorder struct {
	mock *MockURLBuilder
}

// NewMockURLBuilder creates a new mock instance.
func NewMockURLBuilder(ctrl *gomock.Controller) *MockURLBuilder {
	mock := &MockURLBuilder{ctrl: ctrl}
	mock.recorder = &MockURLBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLBuilder) EXPECT() *MockURLBuilderMockRecorder {
	return m.recorder
}

// Action mocks base method.
func (m *MockURLBuilder) Action(schema *types.APISchema, id, action string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Action", schema, id, action)
	ret0, _ := ret[0].(string)
	return ret0
}

// Action indicates an expected call of Action.
func (mr *MockURLBuilderMockRecorder) Action(schema, id, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Action", reflect.TypeOf((*MockURLBuilder)(nil).Action), schema, id, action)
}

// Collection mocks base method.
func (m *MockURLBuilder) Collection(schema *types.APISchema) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collection", schema)
	ret0, _ := ret[0].(string)
	return ret0
}

// Collection indicates an expected call of Collection.
func (mr *MockURLBuilderMockRecorder) Collection(schema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockURLBuilder)(nil).Collection), schema)
}

// CollectionAction mocks base method.
func (m *MockURLBuilder) CollectionAction(schema *types.APISchema, action string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectionAction", schema, action)
	ret0, _ := ret[0].(string)
	return ret0
}

// CollectionAction indicates an expected call of CollectionAction.
func (mr *MockURLBuilderMockRecorder) CollectionAction(schema, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectionAction", reflect.TypeOf((*MockURLBuilder)(nil).CollectionAction), schema, action)
}

// Current mocks base method.
func (m *MockURLBuilder) Current() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Current")
	ret0, _ := ret[0].(string)
	return ret0
}

// Current indicates an expected call of Current.
func (mr *MockURLBuilderMockRecorder) Current() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockURLBuilder)(nil).Current))
}

// Link mocks base method.
func (m *MockURLBuilder) Link(schema *types.APISchema, id, linkName string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Link", schema, id, linkName)
	ret0, _ := ret[0].(string)
	return ret0
}

// Link indicates an expected call of Link.
func (mr *MockURLBuilderMockRecorder) Link(schema, id, linkName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Link", reflect.TypeOf((*MockURLBuilder)(nil).Link), schema, id, linkName)
}

// Marker mocks base method.
func (m *MockURLBuilder) Marker(marker string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marker", marker)
	ret0, _ := ret[0].(string)
	return ret0
}

// Marker indicates an expected call of Marker.
func (mr *MockURLBuilderMockRecorder) Marker(marker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marker", reflect.TypeOf((*MockURLBuilder)(nil).Marker), marker)
}

// RelativeToRoot mocks base method.
func (m *MockURLBuilder) RelativeToRoot(path string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelativeToRoot", path)
	ret0, _ := ret[0].(string)
	return ret0
}

// RelativeToRoot indicates an expected call of RelativeToRoot.
func (mr *MockURLBuilderMockRecorder) RelativeToRoot(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelativeToRoot", reflect.TypeOf((*MockURLBuilder)(nil).RelativeToRoot), path)
}

// ResourceLink mocks base method.
func (m *MockURLBuilder) ResourceLink(schema *types.APISchema, id string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceLink", schema, id)
	ret0, _ := ret[0].(string)
	return ret0
}

// ResourceLink indicates an expected call of ResourceLink.
func (mr *MockURLBuilderMockRecorder) ResourceLink(schema, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceLink", reflect.TypeOf((*MockURLBuilder)(nil).ResourceLink), schema, id)
}

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// ByID mocks base method.
func (m *MockStore) ByID(apiOp *types.APIRequest, schema *types.APISchema, id string) (types.APIObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByID", apiOp, schema, id)
	ret0, _ := ret[0].(types.APIObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByID indicates an expected call of ByID.
func (mr *MockStoreMockRecorder) ByID(apiOp, schema, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByID", reflect.TypeOf((*MockStore)(nil).ByID), apiOp, schema, id)
}

// Create mocks base method.
func (m *MockStore) Create(apiOp *types.APIRequest, schema *types.APISchema, data types.APIObject) (types.APIObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", apiOp, schema, data)
	ret0, _ := ret[0].(types.APIObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockStoreMockRecorder) Create(apiOp, schema, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStore)(nil).Create), apiOp, schema, data)
}

// Delete mocks base method.
func (m *MockStore) Delete(apiOp *types.APIRequest, schema *types.APISchema, id string) (types.APIObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", apiOp, schema, id)
	ret0, _ := ret[0].(types.APIObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockStoreMockRecorder) Delete(apiOp, schema, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStore)(nil).Delete), apiOp, schema, id)
}

// List mocks base method.
func (m *MockStore) List(apiOp *types.APIRequest, schema *types.APISchema) (types.APIObjectList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", apiOp, schema)
	ret0, _ := ret[0].(types.APIObjectList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockStoreMockRecorder) List(apiOp, schema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStore)(nil).List), apiOp, schema)
}

// Update mocks base method.
func (m *MockStore) Update(apiOp *types.APIRequest, schema *types.APISchema, data types.APIObject, id string) (types.APIObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", apiOp, schema, data, id)
	ret0, _ := ret[0].(types.APIObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockStoreMockRecorder) Update(apiOp, schema, data, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStore)(nil).Update), apiOp, schema, data, id)
}

// Watch mocks base method.
func (m *MockStore) Watch(apiOp *types.APIRequest, schema *types.APISchema, w types.WatchRequest) (chan types.APIEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", apiOp, schema, w)
	ret0, _ := ret[0].(chan types.APIEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockStoreMockRecorder) Watch(apiOp, schema, w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockStore)(nil).Watch), apiOp, schema, w)
}
